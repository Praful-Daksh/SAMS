import axios from 'axios';
import { TimetableEntry, TimetableMetrics } from '../types/timetable.types';


const API_BASE_URL = '/api/v1'; // Example: Adjust to your API's base path
const TIMETABLE_API_URL = `${API_BASE_URL}/timetable`;

/**
 * Interface for query parameters when fetching weekly schedule data.
 * Customize this based on your API's filtering capabilities.
 */
export interface FetchWeeklyScheduleParams {
  weekId?: string; // e.g., '2023-W40' or a specific date marking the start of the week
  facultyId?: string;
  roomId?: string;
  // Add other relevant query parameters
}

/**
 * Fetches timetable metrics.
 * GET /api/v1/timetable/metrics
 */
export const fetchTimetableMetrics = async (): Promise<TimetableMetrics> => {
  try {
    // const response = await axios.get<TimetableMetrics>(`${TIMETABLE_API_URL}/metrics`);
    // return response.data;

    // Placeholder implementation:
    console.log('Fetching timetable metrics...');
    return Promise.resolve({
      totalClasses: 72,  // Sample data
      labsScheduled: 18, // Sample data
      // Initialize with default or sample metric values
      // facultyOccupancy: 85, // Example if you add this
      // roomUtilization: 60,  // Example if you add this
    });
  } catch (error) {
    console.error("Error fetching timetable metrics:", error);
    throw error;
  }
};

/**
 * Fetches the weekly schedule.
 * GET /api/v1/timetable/weekly-schedule
 * @param params - Query parameters for filtering the schedule.
 */
export const fetchWeeklySchedule = async (params?: FetchWeeklyScheduleParams): Promise<TimetableEntry[]> => {
  try {
    // const response = await axios.get<TimetableEntry[]>(`${TIMETABLE_API_URL}/weekly-schedule`, { params });
    // return response.data;

    // Placeholder implementation:
    console.log('Fetching weekly schedule with params:', params);
    // Example: Return a static list or an empty array for now
    return Promise.resolve([
      { id: '1', day: 'Monday', timeSlot: '09:00-10:00', subject: 'Calculus I', faculty: 'Dr. E. Codd', room: 'RM101' },
      { id: '2', day: 'Monday', timeSlot: '10:00-11:00', subject: 'Data Structures', faculty: 'Prof. A. Turing', room: 'LB202 (Lab)' },
      { id: '3', day: 'Tuesday', timeSlot: '11:00-12:00', subject: 'Linear Algebra', faculty: 'Dr. E. Codd', room: 'RM103' },
      { id: '4', day: 'Wednesday', timeSlot: '14:00-15:00', subject: 'Algorithms Lab', faculty: 'Prof. A. Turing', room: 'LB202 (Lab)' },
      { id: '5', day: 'Friday', timeSlot: '09:00-10:00', subject: 'Calculus I', faculty: 'Dr. E. Codd', room: 'RM101' },
    ]);
  } catch (error) {
    console.error("Error fetching timetable data:", error);
    // Depending on your error handling strategy, you might throw the error,
    // return a default value, or handle it in a specific way.
    throw error;
  }
};

/**
 * Data Transfer Object for creating a new timetable entry.
 * 'id' is typically generated by the backend, so it's omitted.
 */
export type CreateTimetableEntryDto = Omit<TimetableEntry, 'id'>;

/**
 * Creates a new timetable entry.
 * POST /api/v1/timetable
 * @param entryData - The data for the new timetable entry.
 */
export const createTimetableEntry = async (entryData: CreateTimetableEntryDto): Promise<TimetableEntry> => {
  try {
    // const response = await axios.post<TimetableEntry>(`${TIMETABLE_API_URL}`, entryData);
    // return response.data;

    // Placeholder implementation:
    console.log('Creating timetable entry:', entryData);
    const newEntry: TimetableEntry = {
      id: `temp-${Date.now().toString()}`, // Simulate ID generation for the placeholder
      ...entryData,
    };
    return Promise.resolve(newEntry);
  } catch (error) {
    console.error("Error creating timetable entry:", error);
    throw error;
  }
};

/**
 * Interface for parameters when cloning a timetable.
 */
export interface CloneTimetableParams {
  sourceTimetableId: string;
  newTimetableName?: string; // Optional: new name for the cloned timetable
  targetWeekId?: string; // Optional: if cloning to a different week
}

/**
 * Clones an existing timetable.
 * POST /api/v1/timetable/clone
 * @param params - Parameters for cloning.
 */
export const cloneTimetable = async (params: CloneTimetableParams): Promise<{ success: boolean; newTimetableId?: string; message?: string }> => {
  try {
    // const response = await axios.post<{ success: boolean; newTimetableId?: string; message?: string }>(`${TIMETABLE_API_URL}/clone`, params);
    // return response.data;

    // Placeholder implementation:
    console.log('Cloning timetable with params:', params);
    return Promise.resolve({ success: true, newTimetableId: `cloned-${Date.now()}`, message: "Timetable cloned successfully." });
  } catch (error) {
    console.error("Error cloning timetable:", error);
    throw error;
  }
};

/**
 * Interface for parameters when exporting a timetable.
 */
export interface ExportTimetableParams {
  timetableId?: string; // Optional: specify a particular timetable, or export current/all
  format: 'csv' | 'pdf' | 'xlsx'; // Example formats
}

/**
 * Exports a timetable.
 * GET /api/v1/timetable/export
 * This might return a Blob for direct download or a URL to the file.
 * @param params - Parameters for exporting.
 */
export const exportTimetable = async (params: ExportTimetableParams): Promise<Blob> => {
  try {
    // const response = await axios.get<Blob>(`${TIMETABLE_API_URL}/export`, {
    //   params,
    //   responseType: 'blob', // Important for file downloads
    // });
    // return response.data;

    // Placeholder implementation:
    console.log('Exporting timetable with params:', params);
    return Promise.resolve(new Blob(["Sample export data for format: " + params.format], { type: 'text/plain' }));
  } catch (error) {
    console.error("Error exporting timetable:", error);
    throw error;
  }
};